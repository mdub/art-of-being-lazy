---
layout: slideshow/_layout.html.haml
title: Enumerable, and the art of being lazy
...

- content_for[:head] = capture_haml do
  %link{:href => href("custom-styles.css"), :rel => "stylesheet"}/

%section.title

  %h1 Enumerable, and the art of being lazy

  %p Mike Williams, <strike>June 2011</strike> May 2016

%section

  %h1 a simple Enumerable

  %pre
    :preserve

      class SomeNumbers

        # declare one method

        def <b>each</b>
          yield 0
          yield 1
          yield 1
          yield 2
          yield 3
          yield 5
          yield 8
        end

        # mix in a bunch more

        include <b>Enumerable</b>

      end

%section

  %h1 woohoo free stuff!

  %pre
    :preserve

      numbers = SomeNumbers.new

      numbers.to_a              # => [0, 1, 1, 2, 3, 5, 8]

      numbers.take(5)           # => [0, 1, 1, 2, 3]
      numbers.drop(5)           # => [5, 8]

      numbers.max               # => 8

      numbers.collect do |x|
        x * 2
      end                       # => [0, 2, 2, 4, 6, 10, 16]

      numbers.inject(&:+)       # => 20

%section

  %h1
    \#to_enum
    (1.9)

  %h2 turn any iterator into an Enumerator

  %pre
    :preserve

      io = StringIO.new("abcdefghijklmnopqrstuvwxyz")

      io.<b>each_char</b> { |c| puts c }
      # prints "a", "b", etc.

      io.<b>to_enum</b>(:each_char).take(5)
      # => %w(a b c d e f g)

  %pre
    :preserve

      array = %w(Juan Too Free)

      array.to_enum(:each_with_index).to_a
      # => [["Juan", 0], ["Too", 1], ["Free", 2]]

%section

  %h1 cf. Unix pipes

  %table.center
    %tr
      %th Enumerable
      %th Unix command
    %tr
      %td
        %code select, reject, grep
      %td
        %code grep, grep -v
    %tr
      %td
        %code collect/map
      %td
        %code sed, awk, tr
    %tr
      %td
        %code sort, uniq
      %td
        %code sort, uniq
    %tr
      %td
        %code take, drop
      %td
        %code head, tail

  %pre
    :preserve

      cat messages.log | awk '{print $1}' | sort -u | wc -l

      messages.collect { |line| line.split[0] }.uniq.size

%section

  %h2 similar

  %ul.big.sparse

    %li small, simple operations

    %li pre-tested

    %li composable

  %h2 but different

  %ul.big.sparse

    %li not streamable

    %li not parallelisable

%section

  %h1 observation:

  %p Some Enumerable operations have to read <u>all</u> the input before producing output, e.g.

  %ul
    %li
      %code min
    %li
      %code max
    %li
      %code sort
    %li
      %code inject

  %p Some <u>could</u> start early, e.g.

  %ul
    %li
      %code select
    %li
      %code reject
    %li
      %code collect
    %li
      %code uniq

  %p (but they don't)

%section

  %h1 an infinite Enumerable

  %pre
    :preserve

      class FibonacciSequence

        def <b>each</b>
          a = 0
          b = 1
          loop do
            yield a
            a, b = b, a+b
          end
        end

        include <b>Enumerable</b>

      end

      irb> FibonacciSequence.new.each { |n| puts n }
      0
      1
      1
      2
      3
      5
      8
      13
      21
      ...

%section

  %h1 "infinite" problems

  %pre
    :preserve

      fib = FibonacciSequence.new

      fib.take(5)               # => [0, 1, 1, 2, 3]

      fib.drop(3).take(2)       # ... a long wait

      fib.select(&:even?)       # ... nada

      fib.collect do |x|
        x * 2
      end                       # ... S.O.L.

%section

  %h1 "big" problems

  %pre
    :preserve

      # an ActiveRecord example

      scope = Meetings.order_by("starts_at DESC")
      meetings = scope.<b>to_enum</b>(:find_each)

      recent_meeting_organisers = meetings      \
        .collect { |e| e.organiser.name }       \
        .uniq                                   \
        .take(20)

  %p Problems:

  %ul.sparse
    %li generates (using collect, and uniq) a bunch of objects that are never used
    %li might require a lot of memory for temporary storage

%section

  %h1 solution: unroll the loops

  %pre
    :preserve

      # BEFORE

      recent_meeting_organisers = meetings      \
        .collect { |e| e.organiser.name }       \
        .uniq                                   \
        .take(20)

      # AFTER

      recent_meeting_organisers = []
      meetings.each do |e|
        name = e.organiser.name
        unless recent_meeting_organisers.member?(name)
          recent_meeting_organisers << name
        end
        break if recent_meeting_organisers.size == 20
      end

  %p Blah. WTF!?

%section

  %h1 Fibonacci, unrolled

  %pre
    :preserve

      fib = FibonacciSequence.new

      # get the first five <u>even</u> Fibonacci numbers

      fib.select(&:even?).take(5)   # ... never returns

      # unrolled

      result = []

      fib.each do |n|
        result << n if n.even?
        break if result.size == 5
      end

      result                        # => [0, 2, 8, 34, 144]

%section

  %h1 Fibonacci, lazy

  %pre
    :preserve

      # get the first five <u>even</u> Fibonacci numbers

      fib.select(&:even?).take(5)   # ... never returns

      fib.<b>lazy</b>.select(&:even?).take(5).<b>to_a</b>
                                    # => [0, 2, 8, 34, 144]

      require 'lazily'

      fib.<b>lazily</b>.select(&:even?).take(5).to_a
                                    # => [0, 2, 8, 34, 144]

%section

  %h1 breaking it down

  %h2 all sugary

  %pre
    :preserve

      fib.lazily.select(&:even?).take(5)

  %h2 functional

  %pre
    :preserve

      take(select(fib, &:even?), 5)

  %h2 decorative

  %pre
    :preserve

      Taker.new(Selector.new(fib, &:even?), 5)

%section

  %h2 lazy "select"

  %pre
    :preserve

      class <b>Selector</b>

        def initialize(source, <b>&predicate</b>)
          @source = source
          @predicate = predicate
        end

        def each
          @source.each do |value|
            <b>yield value if @predicate.call(value)</b>
          end
        end

        include Enumerable

      end

%section

  %h2 lazy "take"

  %pre
    :preserve

      class <b>Taker</b>

        def initialize(source, <b>n</b>)
          @source = source
          @n = n
        end

        def each
          @source.each_with_index do |value, index|
            <b>break if index >= @n
            yield value</b>
          end
        end

        include Enumerable

      end


%section

  %h1 decorative sugar

  %pre
    :preserve

      module Enumerable

        def <b>lazy_select</b>(&predicate)
          Selector.new(self, &predicate)
        end

        def <b>lazy_take</b>(n)
          Taker.new(self, n)
        end

      end

      fib.select(&:even?).take(5)     # ... never returns

      fib.<b>lazy_select</b>(&:even?).<b>lazy_take</b>(5)
                                      # => [0, 2, 8, 34, 144]

  %p Tah-dah!

%section

  %h1 Lazily

  %pre
    :preserve

      gem "lazily"

  %p It applies layers of decorative laziness, e.g.

  %pre
    :preserve

      fib.lazily.select(&:even?).take(5)

      #=> #&lt;Lazily::Filter: take
            #&lt;Lazily::Filter: select
              #&lt;Lazily::Proxy:
                #&lt;FibonacciSequence:0x007f8bc22ce868&gt;&gt;&gt;&gt;

  %h2 but wait, there's more!

%section

  %h1 combining Enumerables

  %pre
    :preserve

      numbers_a = [1, 2, 5]
      numbers_b = [3, 4, 6]

      Lazily.<b>zip</b>(numbers_a, numbers_b).to_a
      # => [[1, 3], [2, 4], [5, 6]]

      Lazily.<b>concat</b>(numbers_a, numbers_b).to_a
      # => [1, 2, 5, 3, 4, 6]

      Lazily.<b>merge</b>(numbers_a, numbers_b).to_a
      # => [1, 2, 3, 4, 5 ,6]

      words_1 = %w(a dd cccc)
      words_2 = %w(eee bbbbb)

      Lazily.<b>merge</b>(words_1, words_2, &:length).to_a
      # => %w(a dd eee cccc bbbbb)

%section

  %h1 combine big/infinite things

  %pre
    :preserve

      <i># some source of content</i>
      sources = [
        Post.recent.authored_by_friends_of(@user),
        Post.recent.on_interests_of(@user),
        UserFollowing.recent.by_friends_of(@user),
        TopicFollowing.recent.by_friends_of(@user)
      ]

      <i># stream each, most recent first</i>
      streams = sources.map do |source|
        source.<b>to_enum(:find_each).lazily.uniq</b>
      end

      <i># merge into a single stream</i>
      merged_stream = <b>Lazily.merge</b>(*streams, &:recency)

      <i># grab a page's worth</i>
      page = merged_stream.<b>take</b>(23)

%section

  %img(src="images/aggy.png")

%section

  %h1 in summary

  %pre
    :preserve

      gem install enumerating

  %ul.big.sparse
    %li= raw_link("https://github.com/mdub/enumerating")
    %li= raw_link("http://twitter.com/woollyams")
    %li= raw_link("http://www.cogentconsulting.com.au/")

  %p For even more laziness, see:

  %ul.sparse
    %li= raw_link("https://github.com/harukizaemon/hamster")
